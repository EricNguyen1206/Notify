services:
  mysql:
    image: mysql:8.0
    env_file:
      - .env
    environment:
      - MYSQL_ROOT_PASSWORD=${NOTIFY_MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${NOTIFY_MYSQL_DATABASE}
      - MYSQL_USER=${NOTIFY_MYSQL_USER}
      - MYSQL_PASSWORD=${NOTIFY_MYSQL_PASSWORD}
    volumes:
      - mysql-data:/var/lib/mysql
    ports:
      - "3306:3306"
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "mysql", "-u${NOTIFY_MYSQL_USER}", "-p${NOTIFY_MYSQL_PASSWORD}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - notify-net

  redis:
    image: redis:alpine
    env_file:
      - .env
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${NOTIFY_REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - notify-net

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    env_file:
      - .env
    environment:
      - MINIO_ROOT_USER=${NOTIFY_MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${NOTIFY_MINIO_ROOT_PASSWORD}
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    networks:
      - notify-net

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    links:
      - mysql:db
    ports:
      - "${NOTIFY_PHPMYADMIN_PORT}:80" # Maps to 8000:80
    networks:
      - notify-net

  kafka:
    image: bitnami/kafka:3.4
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      # Required for KRaft mode
      - KAFKA_KRAFT_MODE=true
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      # Listener configuration
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Allow plaintext connection (no SSL)
      - ALLOW_PLAINTEXT_LISTENER=yes
      # Optional: Auto-create topics if they don't exist
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    volumes:
      - kafka-data:/bitnami/kafka
    networks:
      - notify-net
    healthcheck:
      test: [ "CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  # kafka ui to check cluster status
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      kafka:
        condition: service_started
    ports:
      - "8082:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local-kafka
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    networks:
      - notify-net

  aggregation-service:
    build: ./aggregation-service
    ports:
      - "8081:8081" # Using different port from .env
    environment:
      - REDIS_ADDR=redis:6379
      - REDIS_PASSWORD=${NOTIFY_REDIS_PASSWORD}
      - MYSQL_DSN=${NOTIFY_MYSQL_USER}:${NOTIFY_MYSQL_PASSWORD}@tcp(mysql:3306)/${NOTIFY_MYSQL_DATABASE}?charset=utf8mb4&parseTime=True&loc=Local
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_TOPIC=voting-events
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
      kafka:
        condition: service_started
    networks:
      - notify-net

  # voting-service
  voting-service:
    build: ./voting-service
    ports:
      - "${NOTIFY_SERVICE_PORT}:8080" # Maps to 8080:8080
    env_file:
      - .env
    environment:
      - NOTIFY_DB_HOST=mysql
      - NOTIFY_DB_PORT=3306
      - NOTIFY_DB_USER=${NOTIFY_MYSQL_USER}
      - NOTIFY_DB_PASSWORD=${NOTIFY_MYSQL_PASSWORD}
      - NOTIFY_DB_NAME=${NOTIFY_MYSQL_DATABASE}
      - NOTIFY_DB_PROTOCOL=tcp
      - NOTIFY_REDIS_ADDR=redis:6379
      - NOTIFY_MINIO_ENDPOINT=minio:9000
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
      # minio:
      #   condition: service_started
      aggregation-service:
        condition: service_started
    networks:
      - notify-net
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://voting-service:8000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
  # Add Nginx as a reverse proxy
  # nginx:
  #   image: nginx:alpine
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf
  #   env_file:
  #     - .env
  #   # Remove voting-service from depends_on since we'll run it locally
  #   depends_on:
  #     - minio
  #     - aggregation-service
  #     - phpmyadmin
  #     - kafka
  #     - voting-service

volumes:
  mysql-data:
  redis-data:
  minio-data:
  kafka-data:

    # Add networks configuration at the bottom
networks:
  notify-net:
    driver: bridge
