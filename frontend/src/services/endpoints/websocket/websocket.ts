/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Notify Chat Service API
 * A RESTful API service for chat functionality
 * OpenAPI spec version: 1.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ChatServiceInternalModelsChannelMessageData,
  ChatServiceInternalModelsErrorData,
  ChatServiceInternalModelsTypingIndicatorData,
  ChatServiceInternalModelsWebSocketExampleMessages,
  ChatServiceInternalModelsWebSocketMessageType
} from '../../schemas';

import { axiosInstance } from '../../axios-config';




/**
 * Returns the enum values for all valid WebSocket message types
 * @summary Get WebSocket message type enum
 */
export const getWsMessageTypes = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ChatServiceInternalModelsWebSocketMessageType>(
      {url: `/ws/message-types`, method: 'GET', signal
    },
      );
    }
  

export const getGetWsMessageTypesQueryKey = () => {
    return [`/ws/message-types`] as const;
    }

    
export const getGetWsMessageTypesQueryOptions = <TData = Awaited<ReturnType<typeof getWsMessageTypes>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWsMessageTypes>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWsMessageTypesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWsMessageTypes>>> = ({ signal }) => getWsMessageTypes(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWsMessageTypes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetWsMessageTypesQueryResult = NonNullable<Awaited<ReturnType<typeof getWsMessageTypes>>>
export type GetWsMessageTypesQueryError = unknown


export function useGetWsMessageTypes<TData = Awaited<ReturnType<typeof getWsMessageTypes>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWsMessageTypes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWsMessageTypes>>,
          TError,
          Awaited<ReturnType<typeof getWsMessageTypes>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWsMessageTypes<TData = Awaited<ReturnType<typeof getWsMessageTypes>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWsMessageTypes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWsMessageTypes>>,
          TError,
          Awaited<ReturnType<typeof getWsMessageTypes>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWsMessageTypes<TData = Awaited<ReturnType<typeof getWsMessageTypes>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWsMessageTypes>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get WebSocket message type enum
 */

export function useGetWsMessageTypes<TData = Awaited<ReturnType<typeof getWsMessageTypes>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWsMessageTypes>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetWsMessageTypesQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Returns the schemas for all WebSocket message types used in the real-time messaging API.
This endpoint is for documentation purposes only and provides TypeScript-compatible schemas.

## Available Message Types:
- **connection.connect** - Connection established (server -> client)
- **connection.disconnect** - Connection closed (server -> client)
- **connection.ping** - Ping message (client -> server)
- **connection.pong** - Pong response (server -> client)
- **channel.join** - Join a channel (client -> server)
- **channel.leave** - Leave a channel (client -> server)
- **channel.message** - Send/receive channel message (bidirectional)
- **channel.typing** - Typing indicator (client -> server)
- **channel.stop_typing** - Stop typing indicator (client -> server)
- **channel.member.join** - Member joined channel (server -> client)
- **channel.member.leave** - Member left channel (server -> client)
- **user.status** - User status update (server -> client)
- **user.notification** - User notification (server -> client)
- **error** - Error message (server -> client)
 * @summary Get WebSocket message schemas
 */
export const getWsSchemas = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ChatServiceInternalModelsWebSocketExampleMessages>(
      {url: `/ws/schemas`, method: 'GET', signal
    },
      );
    }
  

export const getGetWsSchemasQueryKey = () => {
    return [`/ws/schemas`] as const;
    }

    
export const getGetWsSchemasQueryOptions = <TData = Awaited<ReturnType<typeof getWsSchemas>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWsSchemas>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWsSchemasQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWsSchemas>>> = ({ signal }) => getWsSchemas(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWsSchemas>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetWsSchemasQueryResult = NonNullable<Awaited<ReturnType<typeof getWsSchemas>>>
export type GetWsSchemasQueryError = unknown


export function useGetWsSchemas<TData = Awaited<ReturnType<typeof getWsSchemas>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWsSchemas>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWsSchemas>>,
          TError,
          Awaited<ReturnType<typeof getWsSchemas>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWsSchemas<TData = Awaited<ReturnType<typeof getWsSchemas>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWsSchemas>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWsSchemas>>,
          TError,
          Awaited<ReturnType<typeof getWsSchemas>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWsSchemas<TData = Awaited<ReturnType<typeof getWsSchemas>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWsSchemas>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get WebSocket message schemas
 */

export function useGetWsSchemas<TData = Awaited<ReturnType<typeof getWsSchemas>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWsSchemas>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetWsSchemasQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Returns the schema for channel message data structure
 * @summary Get channel message data schema
 */
export const getWsSchemasChannelMessage = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ChatServiceInternalModelsChannelMessageData>(
      {url: `/ws/schemas/channel-message`, method: 'GET', signal
    },
      );
    }
  

export const getGetWsSchemasChannelMessageQueryKey = () => {
    return [`/ws/schemas/channel-message`] as const;
    }

    
export const getGetWsSchemasChannelMessageQueryOptions = <TData = Awaited<ReturnType<typeof getWsSchemasChannelMessage>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWsSchemasChannelMessage>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWsSchemasChannelMessageQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWsSchemasChannelMessage>>> = ({ signal }) => getWsSchemasChannelMessage(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWsSchemasChannelMessage>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetWsSchemasChannelMessageQueryResult = NonNullable<Awaited<ReturnType<typeof getWsSchemasChannelMessage>>>
export type GetWsSchemasChannelMessageQueryError = unknown


export function useGetWsSchemasChannelMessage<TData = Awaited<ReturnType<typeof getWsSchemasChannelMessage>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWsSchemasChannelMessage>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWsSchemasChannelMessage>>,
          TError,
          Awaited<ReturnType<typeof getWsSchemasChannelMessage>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWsSchemasChannelMessage<TData = Awaited<ReturnType<typeof getWsSchemasChannelMessage>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWsSchemasChannelMessage>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWsSchemasChannelMessage>>,
          TError,
          Awaited<ReturnType<typeof getWsSchemasChannelMessage>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWsSchemasChannelMessage<TData = Awaited<ReturnType<typeof getWsSchemasChannelMessage>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWsSchemasChannelMessage>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get channel message data schema
 */

export function useGetWsSchemasChannelMessage<TData = Awaited<ReturnType<typeof getWsSchemasChannelMessage>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWsSchemasChannelMessage>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetWsSchemasChannelMessageQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Returns the schema for error data structure
 * @summary Get error data schema
 */
export const getWsSchemasError = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ChatServiceInternalModelsErrorData>(
      {url: `/ws/schemas/error`, method: 'GET', signal
    },
      );
    }
  

export const getGetWsSchemasErrorQueryKey = () => {
    return [`/ws/schemas/error`] as const;
    }

    
export const getGetWsSchemasErrorQueryOptions = <TData = Awaited<ReturnType<typeof getWsSchemasError>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWsSchemasError>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWsSchemasErrorQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWsSchemasError>>> = ({ signal }) => getWsSchemasError(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWsSchemasError>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetWsSchemasErrorQueryResult = NonNullable<Awaited<ReturnType<typeof getWsSchemasError>>>
export type GetWsSchemasErrorQueryError = unknown


export function useGetWsSchemasError<TData = Awaited<ReturnType<typeof getWsSchemasError>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWsSchemasError>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWsSchemasError>>,
          TError,
          Awaited<ReturnType<typeof getWsSchemasError>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWsSchemasError<TData = Awaited<ReturnType<typeof getWsSchemasError>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWsSchemasError>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWsSchemasError>>,
          TError,
          Awaited<ReturnType<typeof getWsSchemasError>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWsSchemasError<TData = Awaited<ReturnType<typeof getWsSchemasError>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWsSchemasError>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get error data schema
 */

export function useGetWsSchemasError<TData = Awaited<ReturnType<typeof getWsSchemasError>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWsSchemasError>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetWsSchemasErrorQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Returns the schema for typing indicator data structure
 * @summary Get typing indicator data schema
 */
export const getWsSchemasTypingIndicator = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ChatServiceInternalModelsTypingIndicatorData>(
      {url: `/ws/schemas/typing-indicator`, method: 'GET', signal
    },
      );
    }
  

export const getGetWsSchemasTypingIndicatorQueryKey = () => {
    return [`/ws/schemas/typing-indicator`] as const;
    }

    
export const getGetWsSchemasTypingIndicatorQueryOptions = <TData = Awaited<ReturnType<typeof getWsSchemasTypingIndicator>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWsSchemasTypingIndicator>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWsSchemasTypingIndicatorQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWsSchemasTypingIndicator>>> = ({ signal }) => getWsSchemasTypingIndicator(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWsSchemasTypingIndicator>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetWsSchemasTypingIndicatorQueryResult = NonNullable<Awaited<ReturnType<typeof getWsSchemasTypingIndicator>>>
export type GetWsSchemasTypingIndicatorQueryError = unknown


export function useGetWsSchemasTypingIndicator<TData = Awaited<ReturnType<typeof getWsSchemasTypingIndicator>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWsSchemasTypingIndicator>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWsSchemasTypingIndicator>>,
          TError,
          Awaited<ReturnType<typeof getWsSchemasTypingIndicator>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWsSchemasTypingIndicator<TData = Awaited<ReturnType<typeof getWsSchemasTypingIndicator>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWsSchemasTypingIndicator>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWsSchemasTypingIndicator>>,
          TError,
          Awaited<ReturnType<typeof getWsSchemasTypingIndicator>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWsSchemasTypingIndicator<TData = Awaited<ReturnType<typeof getWsSchemasTypingIndicator>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWsSchemasTypingIndicator>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get typing indicator data schema
 */

export function useGetWsSchemasTypingIndicator<TData = Awaited<ReturnType<typeof getWsSchemasTypingIndicator>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWsSchemasTypingIndicator>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetWsSchemasTypingIndicatorQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



