import { defineConfig } from "orval";

export default defineConfig({
  rest: {
    input: {
      target: "./docs/swagger.json",
      override: {
        transformer: (schema) => {
          // Remove the websocket path so it doesn't get generated in REST
          delete schema.paths["/ws"];
          return schema;
        },
      },
    },
    output: {
      mode: "tags-split",
      target: "./src/services/endpoints",
      schemas: "./src/services/schemas",
      client: "react-query",
      clean: true,
      override: {
        mutator: {
          path: "./src/services/axios-config.ts",
          name: "axiosInstance",
        },
      },
    },
  },
  websocket: {
    input: {
      target: "./docs/swagger.json",
      override: {
        transformer: (schema) => {
          // Keep WebSocket paths and schemas from backend
          const wsPaths: Record<string, any> = {};
          const wsSchemas: Record<string, any> = {};

          // Extract WebSocket-related paths
          Object.keys(schema.paths || {}).forEach((path) => {
            if (path.startsWith("/ws") && schema.paths) {
              wsPaths[path] = schema.paths[path];
            }
          });

          // Extract WebSocket-related schemas from components
          if (schema.components && schema.components.schemas) {
            Object.keys(schema.components.schemas).forEach((schemaName) => {
              if (
                schemaName.includes("WebSocket") ||
                schemaName.includes("ChannelMessage") ||
                schemaName.includes("TypingIndicator") ||
                schemaName.includes("ErrorData") ||
                schemaName.includes("ConnectionData") ||
                schemaName.includes("PingPongData") ||
                schemaName.includes("UserStatusData") ||
                schemaName.includes("UserNotificationData") ||
                schemaName.includes("MemberJoinLeaveData") ||
                schemaName.includes("ChannelJoinData") ||
                schemaName.includes("ChannelLeaveData")
              ) {
                wsSchemas[schemaName] = schema.components!.schemas![schemaName];
              }
            });
          }

          // Create new schema with only WebSocket-related content
          schema.paths = wsPaths;
          if (!schema.components) schema.components = {};
          schema.components.schemas = wsSchemas;

          return schema;
        },
      },
    },
    output: {
      target: "src/services/websocket/index.ts",
      client: "axios", // doesn't matter, replaced by mutator
      clean: true,
      override: {
        mutator: {
          path: "./src/services/wsMutator.ts",
          name: "createWebSocketClient",
        },
        // Generate additional type-safe hooks and utilities
        operations: {
          getWs: {
            mutator: "./src/services/wsMutator.ts",
          },
        },
        // Custom header to include additional imports
        header: (info) =>
          [
            "/**",
            ` * Generated by orval v${info.version} üç∫`,
            " * Do not edit manually.",
            ` * ${info.title}`,
            ` * ${info.description}`,
            ` * OpenAPI spec version: ${info.version}`,
            " */",
            "",
            "// WebSocket Type-Safe Client",
            "import { TypeSafeWebSocketClient, ConnectionState, WebSocketClientConfig, WebSocketEventListeners } from '../wsMutator';",
            "import { MessageType, WsBaseMessage, ChannelMessageData, TypingIndicatorData, ErrorData } from '../types/wsTypes';",
            "",
            "// Re-export types for convenience",
            "export { MessageType, ConnectionState, WebSocketClientConfig, WebSocketEventListeners };",
            "export type { WsBaseMessage, ChannelMessageData, TypingIndicatorData, ErrorData };",
            "",
          ].join("\n"),
      },
    },
  },
});
