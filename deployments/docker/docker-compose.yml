# Environment file loading order (Docker Compose automatically loads .env)
# Override with: docker compose --env-file .env.development up
# Or: docker compose --env-file .env.production up

networks:
  notify-network:
    driver: bridge

services:
  # Frontend Service (Next.js)
  frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
        NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL}
    container_name: notify-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL}
      - NEXT_TELEMETRY_DISABLED=${NEXT_TELEMETRY_DISABLED}
    depends_on:
      - app
    networks:
      - notify-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Chat Service (Go Backend)
  app:
    build:
      context: ../../chat-service
      dockerfile: Dockerfile
    container_name: notify-chat-service
    ports:
      - "8080:8080"
    environment:
      - POSTGRES_URL=${POSTGRES_URL}
      - REDIS_URL=${REDIS_URL}
      - NOTIFY_JWT_SECRET=${NOTIFY_JWT_SECRET}
      - NOTIFY_HOST=${NOTIFY_HOST}
      - NOTIFY_PORT=${NOTIFY_PORT}
      - NOTIFY_JWT_EXPIRE=${NOTIFY_JWT_EXPIRE}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
    depends_on:
      - db
      - redis
    networks:
      - notify-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/kaithhealthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: notify-nginx
    ports:
      - "80:80"
    volumes:
      - ../nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - app
    networks:
      - notify-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: notify-chat-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5433:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - notify-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: notify-chat-redis
    ports:
      - "6380:6379"
    networks:
      - notify-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

volumes:
  pgdata:
